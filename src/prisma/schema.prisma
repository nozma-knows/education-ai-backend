// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  firstName     String
  lastName      String
  email         String   @unique
  emailVerified Boolean
  login         Login?
  courses       Course[]
}

model Login {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  hashedPassword String
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  token     String   @unique
}

model PrereqTopic {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  prereqId    String
  prereq      CoursePrereq @relation(fields: [prereqId], references: [id])
  title       String
  description String
}

model CoursePrereq {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  courseId    String
  course      Course        @relation(fields: [courseId], references: [id])
  title       String
  description String
  topics      PrereqTopic[]
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model UnitLesson {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  unitId    String
  unit      CourseUnit @relation(fields: [unitId], references: [id])
  title     String
  topics    String
  content   String
  status    Status
}

model UnitExercise {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  unitId    String
  unit      CourseUnit @relation(fields: [unitId], references: [id])
  task      String
  status    Status
}

model QuizQuestion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizId    String
  quiz      UnitQuiz @relation(fields: [quizId], references: [id])
  question  String
  choices   String[]
  answer    String
  status    Status
}

model UnitQuiz {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  unitId    String
  unit      CourseUnit     @relation(fields: [unitId], references: [id])
  questions QuizQuestion[]
  status    Status
}

model CourseUnit {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id])
  title       String
  description String
  status      Status
  lessons     UnitLesson[]
  exercises   UnitExercise[]
  quizzes     UnitQuiz[]
}

model Course {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  authorId         String
  author           User           @relation(fields: [authorId], references: [id])
  title            String
  description      String
  prereqs          CoursePrereq[]
  units            CourseUnit[]
  intendedOutcomes String[]
  status           Status
}
