type Login {
  id: ID!
  user: User!
  email: String!
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  emailVerified: Boolean
}

type Session {
  id: ID!
  token: String!
}

input CreateLoginInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  passwordConfirmation: String!
}

input LoginInput {
  email: String!
  password: String!
}

# type Course {
#   id: ID!
#   createdAt: String!
#   updatedAt: String!
#   authorId: String!
#   auhtor: User!
#   content: String!
# }

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

type PrereqTopic {
  id: ID!
  createdAt: String!
  updatedAt: String!
  prereqId: String!
  prereq: CoursePrereq!
  title: String!
  description: String!
}

type CoursePrereq {
  id: ID!
  createdAt: String!
  updatedAt: String!
  courseId: String!
  course: Course!
  title: String!
  description: String!
  topics: [PrereqTopic]!
}

type UnitLesson {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  title: String!
  topics: String!
  content: String!
  status: Status!
}

type UnitExercise {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  task: String!
  status: Status!
}

type QuizQuestion {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  question: String!
  choices: [String]!
  answer: String!
  status: Status!
}

type UnitQuiz {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  questions: QuizQuestion!
  status: Status!
}

type CourseUnit {
  id: ID!
  createdAt: String!
  updatedAt: String!
  courseId: String!
  course: Course!
  title: String!
  description: String!
  lessons: [UnitLesson]!
  exercises: [UnitExercise]!
  quizzes: [UnitQuiz]!
  status: Status!
}

type Course {
  id: ID!
  createdAt: String!
  updatedAt: String!
  authorId: String!
  author: User!
  title: String!
  description: String!
  prereqs: [CoursePrereq]!
  units: [CourseUnit]!
  intendedOutcomes: [String]!
  status: Status
}

input CreateCourseInput {
  authorId: ID!
  title: String!
  description: String!
}

input GenerateLessonInput {
  courseTitle: String!
  courseDescription: String!
  lessonId: String!
  lessonTitle: String!
  topics: String!
  pastTopics: String!
}

type Query {
  users: [User]
  session(id: String!): Session
  course(id: String!): Course
  courses(authorId: String!): [Course]
}

type Mutation {
  createLogin(input: CreateLoginInput!): Login!
  login(input: LoginInput!): Session!
  logout: Session!
  createCourse(input: CreateCourseInput!): Course!
  deleteCourse(id: String!): Course!
  generatePrereqs(id: String!): Course!
  generateUnits(id: String!): Course!
  generateIntendedOutcomes(id: String!): Course!
  generateExercises(id: String!): UnitExercise!
  generateQuiz(id: String!): UnitQuiz!
  generateLesson(input: GenerateLessonInput!): UnitLesson!
}
